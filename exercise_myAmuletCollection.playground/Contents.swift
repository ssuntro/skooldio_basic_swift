import Foundation

////
///
///

// 1. Enum for Category
enum AmuletCategory: String {
    case coin = "‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç"
    case powder = "‡∏û‡∏£‡∏∞‡∏ú‡∏á"
    case statue = "‡∏û‡∏£‡∏∞‡∏Å‡∏£‡∏¥‡πà‡∏á"
}

extension AmuletCategory {
    //test - guard let & 7-type of initiatiser
    init?(from raw: String) {
        guard let a = AmuletCategory(rawValue: raw) else { return nil }
        self = a
    }
    //test - computed properties in enum
    var icon: String {
        switch self {
        case .coin: return "üêõ"
        case .powder: return "‚ÑπÔ∏è"
        case .statue: return "‚ö†Ô∏è"
        }
    }

}

// 2. Struct for Amulet
// test - var/let
struct Amulet {
    let name: String
    let year: Int
    let temple: String
    var price: Double
    let category: AmuletCategory
    init(name: String, year: Int, temple: String, price: Double, category: String) {
        self.name = name
        self.year = year
        self.temple = temple
        self.price = price
        self.category = AmuletCategory.init(from: category) ?? AmuletCategory.coin //AmuletCategory.init(rawValue:...)
    }
}

extension Amulet: Hashable {
    static func == (lhs: Amulet, rhs: Amulet) -> Bool {

        return lhs.name == rhs.name && lhs.year == rhs.year
            && lhs.temple == rhs.temple  //‡∏ä‡∏∑‡πà‡∏≠ ‡πÅ‡∏•‡∏∞‡∏õ‡∏µ ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏î‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ô
    }
}


// 3. Class for Amulet Storage
struct AmuletStore {

    //    var amulets: [Amulet] = []
    var amulets: Set<Amulet> = []

    // 4. Function to add Amulet
    mutating func addAmulet(_ amulet: Amulet) {
        if isDuplicate(amulet) {
            print("‚ö†Ô∏è This amulet already exists.")
        } else {
            amulets.insert(amulet)
            print("‚úÖ Amulet added successfully.")
        }
    }

    // 5. Function to check duplicate
    func isDuplicate(_ newAmulet: Amulet) -> Bool {
        return amulets.contains(newAmulet)
        //        return amulets.contains { $0 == newAmulet}
    }

    // 6. Function to find the most expensive Amulet
    func mostExpensiveAmulet() -> Amulet? {
        return amulets.max { $0.price < $1.price }
    }

    // 7. Bonus: Closure to filter expensive amulets
    func filterExpensiveAmulets(minPrice: Double) -> [Amulet] {
        return amulets.filter { $0.price > minPrice }
    }
}

// ---
// üìã Usage Example:
var store = AmuletStore()
let amulet1 = Amulet(
    name: "‡∏û‡∏£‡∏∞‡∏™‡∏°‡πÄ‡∏î‡πá‡∏à‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏Ü‡∏±‡∏á", year: 2400, temple: "‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏Ü‡∏±‡∏á", price: 50000,
    category: "‡∏û‡∏£‡∏∞‡∏ú‡∏á")
var amulet2 = Amulet(
    name: "‡∏û‡∏£‡∏∞‡∏Å‡∏£‡∏¥‡πà‡∏á‡∏ß‡∏±‡∏î‡∏™‡∏∏‡∏ó‡∏±‡∏®‡∏ô‡πå", year: 2470, temple: "‡∏ß‡∏±‡∏î‡∏™‡∏∏‡∏ó‡∏±‡∏®‡∏ô‡πå", price: 40000,
    category: "‡∏û‡∏£‡∏∞‡∏Å‡∏£‡∏¥‡πà‡∏á")

store.addAmulet(amulet1)
store.addAmulet(amulet2)
store.addAmulet(amulet1)  // ‡∏•‡∏≠‡∏á‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ã‡πâ‡∏≥

// ‡∏•‡∏≠‡∏á ‡πÑ‡∏°‡πà remove & ‡πÑ‡∏°‡πà add ‡πÄ‡∏Ç‡πâ‡∏≤‡πÑ‡∏õ‡πÉ‡∏´‡∏°‡πà
// ‡∏•‡∏≠‡∏á add ‡πÉ‡∏´‡∏°‡πà‡πÅ‡∏ö‡∏ö‡πÑ‡∏°‡πà remove ‡∏Å‡πà‡∏≠‡∏ô
amulet2.price = 400000
store.amulets.remove(amulet2)
store.addAmulet(amulet2)

if let topAmulet = store.mostExpensiveAmulet() {
    print("üíé Top Amulet: \(topAmulet.name) ‡∏£‡∏≤‡∏Ñ‡∏≤ \(topAmulet.price) ‡∏ö‡∏≤‡∏ó")
} else {
    print("No amulets found.")
}

let expensiveAmulets = store.filterExpensiveAmulets(minPrice: 10000)
print("üßÆ Expensive Amulets (>10,000): \(expensiveAmulets.count) found")
print("‚ú® All amulet in my collection")
expensiveAmulets.forEach { a in
    print(a)
}

print("üîç Expensive amulets from ‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏Ü‡∏±‡∏á")
for a in store.amulets where a.temple == "‡∏ß‡∏±‡∏î‡∏£‡∏∞‡∏Ü‡∏±‡∏á" && a.price > 30000 {
    print(a)
}


